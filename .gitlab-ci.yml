# Stages for the CI/CD job
stages:
  - test
  - build
  - deploy

# GitLab Dependency Proxy to get rid of Docker hub pull limit issue
# https://docs.gitlab.com/ee/user/packages/dependency_proxy/#authenticate-within-cicd
image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/python:3.7

# This fixes "error during connect: Post http://docker:2375/v1.40/auth: dial tcp: lookup docker on 192.168.65.5:53: no such host"
variables:
  # Environment Variable for docker:dind service explaining to use overlay2 as supporting driver for docker
  # https://docs.docker.com/storage/storagedriver/overlayfs-driver/
  DOCKER_DRIVER: overlay2
  # We need to disable TLS (https://about.gitlab.com/blog/2019/07/31/docker-in-docker-with-docker-19-dot-03/#disable-tls)
  # to fix the error "docker: Cannot connect to the Docker daemon at tcp://docker:2375. Is the docker daemon running?"
  DOCKER_TLS_CERTDIR: ""
  DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
  BASE: k8s/web-prd/base

# Template to build docker image
.build:
  stage: build
  image: docker
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t ${DOCKER_IMAGE} --no-cache -f k8s/Dockerfile .
    - docker push ${DOCKER_IMAGE}
    # remove local image from shared runner
    - docker rmi ${DOCKER_IMAGE}
    - docker logout $CI_REGISTRY

# Template to deploy application to k8s cluster
.deploy:
  stage: deploy
  image: dockerhub.ebi.ac.uk/ensembl-web/deploy-tools:latest

  script:
    - sed -i "s#<DOCKER_IMAGE>#${DOCKER_IMAGE}#g" k8s/web-prod/thoas_deployment.yaml
    - kubectl apply -f k8s/web-prod/thoas_deployment.yaml

# Run a suite of unit and integration tests
test:
  stage: test
  before_script:
    - pip3 install -r requirements-dev.txt
    - export META_CLASSIFIER_PATH=$PWD/docs/metadata_classifiers/
  script:
    - pylint $(git ls-files '*.py') --fail-under=9.5
    - mypy graphql_service
    - pytest

# Build docker image for k8s-deploy branch
build:
  extends: .build
  only:
    - develop
    - main
    - refactor-k8s

# Template to deploy application to web's k8s cluster
.deploy-web:
  extends: .deploy
  script:
    - sed -i "s#<DOCKER_IMAGE>#${DOCKER_IMAGE}#g" web/k8s/thoas_deployment.yaml
    - kubectl apply -f web/k8s/thoas_deployment.yaml
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "main" && $CI_PROJECT_NAMESPACE== "ensembl-web"'

# Template to deploy application to web's k8s cluster
.deploy-web-public:
  extends: .deploy
  script:
    - cd ${BASE}
    - kustomize edit set image DOCKER_IMAGE=${DOCKER_IMAGE}
    - kustomize build . | kubectl apply -f -

  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "refactor-k8s" && $CI_PROJECT_NAMESPACE== "ensembl-web"'

# Template to deploy application to apps k8s cluster
.deploy-apps:
  extends: .deploy
  script:
    - sed -i "s#<DOCKER_IMAGE>#${DOCKER_IMAGE}#g" k8s/web-prod/thoas_deployment.yaml
    - kubectl apply -f k8s/web-prod/thoas_deployment.yaml
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "develop" && $CI_PROJECT_NAMESPACE== "ensembl-apps"'

# deploy to staging at WP-HX
staging:wp-hx:
  extends: .deploy-web
  environment:
    name: wp-hx-staging

# deploy to staging at WP-HH
staging:wp-hh:
  extends: .deploy-web
  environment:
    name: wp-hh-staging

# deploy to internal at WP-HX
internal:wp-hx:
  extends: .deploy-web
  environment:
    name: wp-hx-internal

# deploy to internal at WP-HH
internal:wp-hh:
  extends: .deploy-web
  environment:
    name: wp-hh-internal

 # deploy to live at WP-HX
live:wp-hx:
  extends: .deploy-web
  environment:
    name : wp-hx-live

# deploy to live at WP-HL
live:wp-hl:
  extends: .deploy-web
  environment:
    name : wp-hh-live

deploy:public:
  extends: .deploy-web-public
  variables:
    BASE: k8s/web-prod/overlays/public-graphql
  environment:
    name: wp40-hl-public

deploy:web:
  extends: .deploy-web
  environment:
    name: wp-hx-dev-grp

# deploy application to k8s cluster for k8s-deploy branch
deploy:apps:
  extends: .deploy
  environment:
    name: thoas-graphql
  only:
    - develop
