# Stages for the CI/CD job
stages:
  - test
  - build
  - deploy

# Default variables available across all the jobs
variables:
  DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHORT_SHA}
  DOCKER_TLS_CERTDIR: ""

# Template to build docker image
.build:
  stage: build
  image: docker
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t ${DOCKER_IMAGE} --no-cache -f web/Dockerfile.web .
    - docker push ${DOCKER_IMAGE}
    # remove local image from shared runner
    - docker rmi ${DOCKER_IMAGE}
    - docker logout $CI_REGISTRY

.deploy:
  stage: deploy
  image: dockerhub.ebi.ac.uk/kamal/deploy-tools:0.1

# Template to deploy application to web's k8s cluster
.deploy-web:
  extends: .deploy  
  script:
    - echo "Deploying to web k8s"
#    - sed -i "s#<DOCKER_IMAGE>#${DOCKER_IMAGE}#g" web/k8s/thoas_deployment.yaml
#    - kubectl apply -f web/k8s/thoas_deployment.yaml
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "nodeaffinity" && $CI_PROJECT_NAMESPACE== "ensembl-web"'

# Template to deploy application to apps k8s cluster
.deploy-apps:
  extends: .deploy
  script:
    - echo "Deploying to apps k8s"
#    - sed -i "s#<DOCKER_IMAGE>#${DOCKER_IMAGE}#g" k8s/web-prod/thoas_deployment.yaml
#    - kubectl apply -f k8s/web-prod/thoas_deployment.yaml
  rules:
    - if: '$CI_DEPLOY_FREEZE == null && $CI_COMMIT_BRANCH == "nodeaffinity" && $CI_PROJECT_NAMESPACE== "ensembl-apps"'

# Run a suite of unit and integration tests
test:
  image: python:3.8.1-slim
  stage: test
  before_script:
    - pip3 install -r requirements-dev.txt
    - export META_CLASSIFIER_PATH=$PWD/docs/metadata_classifiers/
  script:
    - pytest

# Build docker image for k8s-deploy branch
build:
  extends: .build
  only:
    - main
    - nodeaffinity

# deploy to dev at WP-HX
deploy:
  extends: .deploy-web
  environment:
    name: wp-hx-dev-grp

# deploy to staging at WP-HX
staging:wp-hx:
  extends: .deploy
  environment:
    name: wp-hx-staging

# deploy to staging at WP-HH
staging:wp-hh:
  extends: .deploy
  environment:
    name: wp-hh-staging

# deploy to internal at WP-HX
internal:wp-hx:
  extends: .deploy
  environment:
    name: wp-hx-internal

# deploy to internal at WP-HH
internal:wp-hh:
  extends: .deploy
  environment:
    name: wp-hh-internal
    
 # deploy to live at WP-HX
live:wp-hx:
  extends: .deploy
  environment:
    name : wp-hx-live

# deploy to live at WP-HL
live:wp-hl:
  extends: .deploy
  environment:
    name : wp-hh-live
