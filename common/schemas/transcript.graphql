type Transcript {
  """
  A Transcript of a Gene. Exons are listed in sequence order
  """
  type: String!
  stable_id: String!
  unversioned_stable_id: String!
  symbol: String
  version: Int
  so_term: String!
  slice: Slice!
  external_references: [ExternalReference!]!
  relative_location: Location!
  product_generating_contexts: [ProductGeneratingContext!]!
  spliced_exons: [SplicedExon!]!
  introns: [Intron!]!
  metadata : TranscriptMetadata!
}

type CDS {
  type: String!
  start: Int!
  end: Int!
  relative_start: Int!
  relative_end: Int!
  protein_length: Int!
  nucleotide_length: Int!
  sequence_checksum: String!
}

type CDNA {
  # The transcribed portion of a transcript with UTRs but Introns removed
  type: String!
  start: Int! # Start in genomic coordinates
  end: Int! # End in genomic coordinates
  length: Int!
  sequence_checksum: String!
}

type Exon {
  type: String!
  # An Exon that is part of a Transcript
  stable_id: String!
  slice: Slice!
  so_term: String!
  version: Int
}

type SplicedExon {
  index: Int!
  relative_location: Location!
  exon: Exon!
}

type Intron {
  type: String!
  index: Int!
  slice: Slice!
  so_term: String!
  relative_location: Location!
  sequence_checksum: String!
}

type ProductGeneratingContext {
  product_type: String!
  default: Boolean!
  cds: CDS
  five_prime_utr: UTR
  three_prime_utr: UTR
  product: Product
  phased_exons: [PhasedExon!]!
  cdna: CDNA!
}

type PhasedExon {
  start_phase: Int!
  end_phase: Int!
  index: Int!
  exon: Exon!
}

type Product {
  type: String!
  stable_id: String!
  unversioned_stable_id: String!
  version: Int
  """
  the value of the type field is "protein"
  """
  so_term: String!
  """
  length in amino acids if product is a protein
  """
  length: Int!
  """
  The value of sequence checksum can be used to retrieve the sequence from RefGet
  """
  sequence_checksum: String!
  external_references: [ExternalReference!]!
  protein_domains: [ProteinDomain!]!
}

type ProteinDomain {
  type: String!
  id: String!
  name: String!
  resource_name: String!
  location: Location!
  hit_location: Location!
  score: Float!
}

type UTR {
  type: String!
  start: Int!
  end: Int!
  length: Int!
  sequence_checksum: String!
}
