type Transcript {
  """
  A Transcript of a Gene. Exons are listed in sequence order
  """
  stable_id: String!
  unversioned_stable_id: String!
  version: Int
  so_term: String
  slice: Slice!
  exons: [Exon!]!
  cross_references: [CrossReference]!
  relative_location: RelativeLocation!
  product_generating_contexts: [ProductGeneratingContext]!
  spliced_exons: [SplicedExon!]!
}

type CDS {
  start: Int!
  end: Int!
  relative_start: Int!
  relative_end: Int!
  protein_length: Int!
  nucleotide_length: Int!
}

type Exon {
  # An Exon that is part of a Transcript
  stable_id: String!
  slice: Slice!
}

type RelativeLocation {
  start: Int!
  end: Int!
  length: Int!
}

type SplicedExon {
  index: Int!
  relative_location: RelativeLocation!
  exon: Exon!
}

type ProductGeneratingContext {
  product_type: String!
  default: Boolean!
  cds: CDS
  five_prime_utr: UTR
  three_prime_utr: UTR
  product: Product
  phased_exons: [PhasedExon!]!
}

type PhasedExon {
  start_phase: Int!
  end_phase: Int!
  index: Int!
  exon: Exon!
  relative_location: RelativeLocation
}

type Product {
  stable_id: String!
  unversioned_stable_id: String!
  version: Int!
  """
  the value of the type field is "protein"
  """
  type: String!
  so_term: String!
  """
  length in amino acids if product is a protein
  """
  length: Int!
  """
  The value of sequence checksum can be used to retrieve the sequence from RefGet
  """
  sequence_checksum: String!
  external_references: [CrossReference]!
  protein_domains: [ProteinDomain]!
}

type ProteinDomain {
  id: String!
  name: String!
  resource_name: String!
  location: RelativeLocation!
  hit_location: RelativeLocation!
  score: Float!
}

type UTR {
  start: Int!
  end: Int!
  relative_start: Int!
  relative_end: Int!
  length: Int!
  # Ignoring checksums until we have a way to get them
}