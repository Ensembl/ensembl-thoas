type Query {
  gene(name: String, stable_id: String): Gene!
  genes: [Gene!]!
  transcripts: [Transcript!]!
  transcript(stable_id: String!): Transcript
  slice(region: String!, start: Int!, end: Int!, feature_type: String!): [RegionResult!]
}

type Gene {
  # The commonly understood concept of gene, with its various transcriptions.
  stable_id: String!
  name: String!
  so_term: String
  transcripts: [Transcript!]!
  slice: Slice!
}

type Transcript {
  # A Transcript of a Gene. Exons are listed in sequence order
  stable_id: String!
  so_term: String
  slice: Slice!
  exons: [Exon!]!
}

type Exon {
  # An Exon that is part of a Transcript
  stable_id: String!
  slice: Slice!
}

type Slice {
  #The container that combines Region and Location together to define a precise locus. The 'default' key defines whether this is the definitive locus for the parent feature. default:False implies there is another locus which is considered more definitive
  region: Region!
  location: Location!
  default: Boolean
}

type Location {
  # A locus associated with a Region. It defines a locality within the Region perhaps corresponding to genomic feature
  start: Int!
  end: Int!
  length: Int!
  location_type: String!
}

type Region {
  # A large contiguous block of assembled sequence, such as a whole chromosome.
  name: String!
  strand: Strand
  assembly: String!
}

type Strand {
  # The direction of reading sense w.r.t. the assembly. 1 = 5'->3', -1 = 3'-5'
  code: String
  value: Int
}

union RegionResult = Gene | Transcript | Exon
